# Obligatorio de Programación II

## Integrantes del equipo
- Triana Correa
- Marcos Fernández

## Descripción del proyecto
Este proyecto tiene como objetivo analizar las tendencias de escucha en Spotify y diseñar un sistema recomendador basado en estadísticas históricas. Se desarrollaron diversas funcionalidades para generar reportes a partir de un dataset con el top 50 histórico de canciones en 73 países.

## Instrucciones para la carga de datos
1. Coloque el archivo `spotify_data.csv` en la raíz del proyecto.
2. Ejecute la aplicación y seleccione la opción de cargar datos.
3. El sistema leerá el archivo CSV y cargará los datos en memoria para su posterior análisis.

## Funcionalidades
La aplicación permite generar los siguientes reportes:
1. **Top 10 canciones en un país en un día dado**: Muestra el nombre de la canción, el artista y la posición en el top 10, ordenados de manera descendente.
2. **Top 5 canciones que aparecen en más top 50 en un día dado**: Muestra las canciones ordenadas por su frecuencia de aparición en el top 50.
3. **Top 7 artistas que más aparecen en los top 50 para un rango de fechas dado**: Cuenta las apariciones de cada artista en el top 50, contabilizando cada canción individualmente.
4. **Cantidad de veces que aparece un artista específico en un top 50 en una fecha dada**.
5. **Cantidad de canciones con un tempo en un rango específico para un rango específico de fechas**.

## Diagrama UML de clases
Incluído en la carpeta del proyecto.

## Descripción de los procesos
# Carga de datos
 **Proceso**: La carga de datos se realiza leyendo el archivo `spotify_data.csv` y almacenando los registros en una estructura de datos eficiente para su análisis.
## Decisiones Tomadas:
1. **Uso de HashMap para Almacenamiento Temporal**:
   - **Motivo**: Eficiencia en la búsqueda y actualización de entradas.
   - **Implementación**: Uso de `MyHashImpl` para almacenar canciones y artistas, lo que permite realizar consultas rápidas sobre los datos cargados desde el CSV.
   - **Ejemplo**:
     ```java
     MyHashImpl<String, Cancion> canciones = new MyHashImpl<>();
     ```

2. **Formateo de Fechas**:
   - **Motivo**: Consistencia en las comparaciones de fechas.
   - **Implementación**: Conversión de fechas del formato `dd/MM/yyyy` al formato `yyyy-MM-dd` para asegurar comparaciones precisas.
   - **Ejemplo**:
     ```java
     DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
     LocalDate localDate = LocalDate.parse(fecha, inputFormatter);
     String formattedDate = localDate.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
     ```

3. **Validación de Entradas**:
   - **Motivo**: Evitar errores durante la ejecución de las consultas.
   - **Implementación**: Validaciones para asegurar que las fechas y abreviaturas de países ingresadas por el usuario tengan el formato correcto.
   - **Ejemplo**:
     ```java
     if (!fecha.matches("\\d{4}-\\d{2}-\\d{2}")) {
         throw new IllegalArgumentException("Formato de fecha incorrecto. Debe ser YYYY-MM-DD.");
     }
     if (!pais.matches("\\b\\w{2}\\b")) {
         throw new IllegalArgumentException("Formato de país incorrecto. Debe ser CC.");
     }
     ```

4. **Uso de Librerías Externas**:
   - **Motivo**: Facilitar la lectura y procesamiento del archivo CSV.
   - **Implementación**: Uso de `Apache Commons CSV` para manejar la lectura y parseo del archivo CSV de manera eficiente y robusta.
   - **Ejemplo**:
     ```java
     CSVFormat format = CSVFormat.DEFAULT
         .withFirstRecordAsHeader()
         .withIgnoreSurroundingSpaces()
         .withEscape('\\')
         .withQuote('"')
         .withDelimiter(',');
     ```

## Medición de eficiencia
### Ejecución de reportes
- **Entidad Cancion
  - Memoria RAM consumida: 480 B
- **Entidad Artista
  - Memoria RAM consumida: 168 B
- **Entidad Spotify
  - Memoria RAM consumida: Depende del número de canciones y artistas cargados desde el CSV.  
- **Entidad Central Operativa - Memoria RAM consumida:
Instancia de SPOTIFY: Depende del número de canciones y artistas cargados desde el CSV. Con base en las mediciones previas, cada Cancion consume aproximadamente 480 bytes y cada Artista 168 bytes.
Variables de Entrada: Dependen del tamaño de las cadenas de texto y variables numéricas.
Estructuras de Datos: MyHashImpl y MyLinkedListImpl tienen un overhead adicional por la gestión de las estructuras internas.
